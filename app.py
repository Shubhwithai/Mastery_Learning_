import streamlit as st
import matplotlib.pyplot as plt
from openai import OpenAI
import json

# Initialize session state variables if they don't exist
if "level" not in st.session_state:
    st.session_state.level = 1
if "score" not in st.session_state:
    st.session_state.score = 0
if "topic" not in st.session_state:
    st.session_state.topic = None
if "questions" not in st.session_state:
    st.session_state.questions = None

def show_dashboard():
    st.title("üìä Student Dashboard")
    level = st.session_state.get("level", 1)
    score = st.session_state.get("score", 0)
    
    # Display current stats
    st.write(f"üéØ Current Mastery Level: {level}")
    st.write(f"üî• Total Score: {score}")
    
    # Progress visualization
    categories = ["Knowledge", "Application", "Reasoning"]
    scores = [min(level * 20, 100) for _ in categories]
    
    # Create the plot
    plt.figure(figsize=(8, 5))
    plt.bar(categories, scores, color=['blue', 'green', 'red'])
    plt.xlabel("Skill Areas")
    plt.ylabel("Proficiency (%)")
    plt.ylim(0, 100)  # Set y-axis limit to 100%
    
    # Display the plot
    st.pyplot(plt)
    
    # Clear the current figure
    plt.clf()

def generate_quiz(topic, level, client):
    """Generate quiz questions using OpenAI API"""
    question_types = {
        1: "MCQ (Single Correct), True/False",
        2: "MCQ (Single/Multiple Correct), Matching",
        3: "Passage-Based, Multiple Response, Sequence Ordering"
    }
    
    prompt = f"""
        Generate {level}-level quiz questions for {topic}.
        Question types should be: {question_types[level]}.
        Ensure exactly 5 questions.
        Format output as JSON:
        [
          {{"question": "What is 2+2?", "options": ["2", "3", "4", "5"], "answer": "4"}}
        ]
    """
    
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "system", "content": prompt}]
        )
        return json.loads(response.choices[0].message.content)
    except Exception as e:
        st.error(f"Error generating quiz: {e}")
        return None

def main():
    # Sidebar Navigation
    menu = st.sidebar.radio("Navigation", ["Home", "Take Quiz", "Dashboard"])

    # Home Page
    if menu == "Home":
        st.title("AI-Powered Adaptive Learning System")
        st.write("Select a topic and take a dynamic quiz generated by GPT-4!")
        
        api_key = st.text_input("Enter your OpenAI API Key:", type="password")
        if api_key:
            st.session_state.api_key = api_key
            st.session_state.client = OpenAI(api_key=api_key)
            st.success("API Key saved successfully! You can now take quizzes.")
        else:
            st.error("API Key is required to use this service.")
            st.stop()

    # Quiz Page
    elif menu == "Take Quiz":
        if not hasattr(st.session_state, 'client'):
            st.error("Please enter your OpenAI API key in the Home page first.")
            st.stop()
            
        st.header("Enter a Topic")
        selected_topic = st.text_input("Enter a topic:", "")
        
        if st.button("Generate Quiz"):
            if selected_topic.strip():
                st.session_state.topic = selected_topic
                questions = generate_quiz(
                    selected_topic, 
                    st.session_state.level,
                    st.session_state.client
                )
                if questions:
                    st.session_state.questions = questions
                    st.success("Quiz generated! Starting now...")
                    st.session_state.current_question = 0
                    st.rerun()
            else:
                st.warning("‚ö†Ô∏è Please enter a topic before starting the quiz.")
                
        # Display quiz if questions are available
        if st.session_state.questions and hasattr(st.session_state, 'current_question'):
            questions = st.session_state.questions
            current_q = st.session_state.current_question
            
            if current_q < len(questions):
                st.subheader(f"Question {current_q + 1} of {len(questions)}")
                question = questions[current_q]
                
                st.write(question["question"])
                answer = st.radio("Choose your answer:", question["options"])
                
                if st.button("Submit"):
                    if answer == question["answer"]:
                        st.session_state.score += 1
                        st.success("Correct! ‚úÖ")
                    else:
                        st.error("Incorrect ‚ùå")
                    
                    st.session_state.current_question += 1
                    if st.session_state.current_question >= len(questions):
                        st.success("Quiz completed! Check your results in the Dashboard.")
                    st.rerun()

    # Dashboard Page
    elif menu == "Dashboard":
        show_dashboard()
        if st.button("Take Another Quiz"):
            st.session_state.questions = None
            st.session_state.current_question = 0
            menu = "Take Quiz"
            st.rerun()

if __name__ == "__main__":
    main()
